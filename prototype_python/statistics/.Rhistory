library(knitr)
options(knitr.kable.NA = "",
digits = 2)
figheight <- 6
figwidth <- 6 * 1.618034
knitr::opts_chunk$set(
comment = ">",
dpi = 450,
fig.path = "figures/",
tidy = TRUE,
fig.height=figheight,
fig.width=figwidth,
fig.align = "center"
)
library(tidyverse)
library(easystats)
library(effectsize)
devtools::install_github("easystats/parameters@dev")
devtools::install_github("easystats/see@dev")
devtools::install_github("easystats/effectsize@dev")
devtools::install_github("easystats/see@dev")
devtools::install_github("easystats/bayeztestR@dev")
devtools::install_github("easystats/bayestestR@dev")
library(effectsize)
library(tidyverse)
library(easystats)
easystats_update("insight")
?easystats_update()
easystats_update()
devtools::install_github("easystats/paramters")
devtools::install_github("easystats/parameters")
library(parameters)
install.packages("bayestestR")
devtools::install_github("easystats/parameters")
library(easystats)
devtools::install_github("easystats/bayestestR")
devtools::install_github("easystats/parameters")
library(tidyverse)
library(easystats)
library(rstanarm)
library(lme4)
library(ggplot2)
df_ResponseSelection <-
list.files(path = "../NumberTrialsCalibration/data/",
pattern = "*_ResponseSelection.csv",
full.names = TRUE) %>%
map_df(~read_csv(.)[, -c(7,8)])
### Raw data
df_ResponseSelection <- df_ResponseSelection %>%
mutate(Right_Bias = ifelse(Stimulus_Side == "RIGHT", "RIGHT", "LEFT")) %>%
mutate(Previous_Response = ifelse(is.na(Previous_Response), "NO", "YES")) %>%
mutate(Previous_RT = ifelse(Previous_Response == "YES", Previous_RT, 0)) %>%
mutate(Error = ifelse(Response != Stimulus_Side, "YES", "NO")) %>%
mutate(Error_Previous = lag(Error))
setwd("C:/Users/Clinical Brain Lab/Dropbox/Deception_GamblingGame/task/CognitiveControl/statistics")
df_ResponseSelection <-
list.files(path = "../NumberTrialsCalibration/data/",
pattern = "*_ResponseSelection.csv",
full.names = TRUE) %>%
map_df(~read_csv(.)[, -c(7,8)])
### Raw data
df_ResponseSelection <- df_ResponseSelection %>%
mutate(Right_Bias = ifelse(Stimulus_Side == "RIGHT", "RIGHT", "LEFT")) %>%
mutate(Previous_Response = ifelse(is.na(Previous_Response), "NO", "YES")) %>%
mutate(Previous_RT = ifelse(Previous_Response == "YES", Previous_RT, 0)) %>%
mutate(Error = ifelse(Response != Stimulus_Side, "YES", "NO")) %>%
mutate(Error_Previous = lag(Error))
df_ResponseSelection_Correct <- df_ResponseSelection %>%
filter(Error == "NO")
### Remve outliers
df_ResponseSelection_Clean <- df_ResponseSelection_Correct %>%
mutate(Outlier_Score = as.numeric(check_outliers(RT, method = c("zscore", "iqr")))) %>%
filter(!Outlier_Score >= 0.5) %>%
select(- c(Outlier_Score, Error))
### Number of impulsive responses, correct and incorrect responses, outliers
n_impulsive = sum(df_ResponseSelection$Previous_Response == "YES")/ nrow(df_ResponseSelection)
n_correct = nrow(df_ResponseSelection_Correct)/nrow(df_ResponseSelection)
n_incorrect = (nrow(df_ResponseSelection) - nrow(df_ResponseSelection_Correct))/nrow(df_ResponseSelection)
n_outliers = (nrow(df_ResponseSelection_Correct) - nrow(df_ResponseSelection_Clean))/nrow(df_ResponseSelection_Correct)
#####################################################
# Stat models
if (length(which(df_ResponseSelection_Clean$Error_Previous == "YES"))/nrow(df_ResponseSelection_Clean) > 0.2) {
model_RS <- lm(RT ~ poly(Trial_Order, 2) + poly(ITI, 2) + Right_Bias + Error_Previous, data = df_ResponseSelection_Clean)
} else if (length(which(df_ResponseSelection_Clean$Previous_Response == "YES"))/nrow(df_ResponseSelection_Clean) > 0.2) {
model_RS <- lm(RT ~ poly(Trial_Order, 2) + poly(ITI, 2) + Right_Bias + Error_Previous + Previous_Response + Previous_Response:Previous_RT , data = df_ResponseSelection_Clean)
} else {
model_RS <- lm(RT ~ poly(Trial_Order, 2) + poly(ITI, 2) + Right_Bias, data = df_ResponseSelection_Clean)
}
## Analyse ITI
RS_ITI_ref <- data.frame(
"Trial_Order" = rep(1, 1000),
"ITI" = seq(from = min(df_ResponseSelection_Clean$ITI),                                     to = max(df_ResponseSelection_Clean$ITI),                                      length.out = 1000),
"Error_Previous" = rep("NO", 1000),
"Right_Bias" = rep("LEFT", 1000),
"Previous_Response" = rep("NO", 1000),
"Previous_RT" = rep(0, 1000))
RS_ITI_pred =  estimate_response(model_RS, RS_ITI_ref)
#RS_ITI_pred = cbind(RS_ITI_ref, RS_ITI_pred [,-c(1:3)])
ITI_min = which.min(RS_ITI_pred$Predicted )
# Analyze Order
RS_Order_ref <- data.frame(
"Trial_Order" = seq(from = min(df_ResponseSelection_Clean$Trial_Order),                            to = max(df_ResponseSelection_Clean$Trial_Order),
length.out = 1000),
#"ITI" = ITI_min,
"ITI" = RS_ITI_pred$ITI[ITI_min],
"Error_Previous" = rep("NO", 1000),
"Right_Bias" = rep("LEFT", 1000),
"Previous_Response" = rep("NO", 1000),
"Previous_RT" = rep(0, 1000))
RS_Order_pred =  estimate_response(model_RS, RS_Order_ref)
#RS_Order_pred = cbind(RS_Order_ref, RS_Order_pred [,-c(1:3)])
Order_min = which.min(RS_Order_pred$Predicted )
#####################################################
# Plot and Summary
model_parameters(model_RS)
model_RS
model_RS
summary(model_RS)
data <- data.frame(y = c(0,1,2,3,4),
x = c(0,1,2,3,4),
g1 = c("A","A","A","B","B"),
g2 = c("X","Y","X","Y","Y"))
model <- lm(y ~ x * g1 * g2, data = data)
summary(model)
model_parameters(model)
reprex::reprex()
reprex::reprex()
